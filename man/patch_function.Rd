% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/patch_function.R
\name{patch_function}
\alias{patch_function}
\title{Patch a function in current R Session}
\usage{
patch_function(
  f,
  search_str,
  expr,
  replace_it = FALSE,
  append_after = TRUE,
  chop_locator_to = NULL,
  env = NULL
)
}
\arguments{
\item{f}{Function to modify / patch}

\item{search_str}{String (or strings; in case multiple strings is given only
first match will be considered) to find in the function body which should act
as location of modification.}

\item{expr}{Expression or code to puch in}

\item{replace_it}{Whether replace it (the match by \code{search_str}) (if \code{TRUE}
the argument \code{append_after} will be omitted)}

\item{append_after}{Whether add after it (\code{replace_it} should be \code{FALSE})}

\item{chop_locator_to}{Fine-tuning the locator (should be an index within the
length of locator)}

\item{env}{In case \code{expr} is passed from a different location apart from
global environment. It may be required if \code{patch_function} is called inside a
function or in different environment from \code{.GlobalEnv}}
}
\value{
Patched \code{function} (if the \code{search_str} is found)
}
\description{
Any function can be modified programmatically within a session.
It also keeps a backup of original function which can be retried by calling
\code{patch_function} and \code{f} argument only (without specifying anything else).
}
\details{
Backup of the original function is kept in an environment for
restoration purpose (if required). That can be obtained by calling
\code{patch_function} and \code{f} argument only (without specifying anything else).

Note that a function can be patched unlimited times (backup of original
function, as available in single session of the package, will be kept only
once)

In case there is a high chance that the target function \code{f} will undergo
several modifications, then \code{search_str} should be given in a way that match
happens even if the code changes (to certain degree). The first match will be
considered for locating purposes.

It is sometimes difficult to understand how \code{chop_locator_to} should be
constructed. In such cases, users may attach optional functions to help them
understand the locator. Which can be done via simple \code{patch_function()} call.
Meaning omitting all arguments.
}
\examples{

# test function
ftest <- function(x, y){
  u <- x+y
  v <- u^2
  z <- v+x
  if(x\%\%2==0){
    z0 <- z+1
  }else{
    if(y\%\%2 == 0){
      v <- 11
      z1 <- 14
      u <- 10
    }else{
      z1 <- 10
    }
    z0 <- z^2+z1
  }

  if(z0\%\%5 == 1){
    z2 <- z0*2
  }else{
    z2 <- z0*3
  }

  z2

}


# find z1 <- 14 and add z1 <- z1 + length(letters) after that
patch_function(ftest, "z1 <- 14", z1 <- z1 + length(letters))

# multiple candidate for matching locator (first match will be considered)
patch_function(ftest, c("v <- 11","z1 <- 14","u <- 10"),
z1 <- z1 + length(letters), replace_it = TRUE)
}
